Facebook关于memcache的拓展规模化应用

摘要： memcached是一个知名的，简单的，内存式缓存方案。本论文论述了facebook如何利用memcached这个基石模块来构建和规模化一个分布式键-值存储，从而来支持世界上最大的社交网络。我们的系统每秒处理数十亿的请求并且存储了数兆的数据， 从而能为全世界数十亿用户提供一个丰富的体验。

**1.简述**

有热度的社交网络网站经常有网络基建的挑战。数以百万计的人们每天都在用这些社交网络，创造了许多运算的，网络的还有输入输出的需求，这些需求很难通过传统的网络架构来满足。一个社交网络的基建需要做到以下几点

（1）几乎实时的通讯
（2）实时从多个源头汇集数据
（3）能够读/写非常有热度的共享的数据（4）能够规模化到处理每秒百万的用户请求

这篇论文讲述了我们如何改进了开源版本的memcached，如何利用memcached这个基石模块来构建和规模化一个分布式键-值存储，从而来支持世界上最大的社交网络。讲述了我们如何从一个群组伺服器系统规模化到一个按照地域分布的多个群组伺服器系统。据我们所知，我们的系统是世界上最大的memcached系统，处理超过每秒十亿的请求，存储数亿兆计的条目。

这篇论文是最近一系列认可分布式键-值存储的灵活性和实用性的作品里最新的。这篇论文主要针对memcached--一个对缓存hash table的应用实现--它提供了对一个共享存储池低延迟的低成本的访问存取。这些特点使我们能够开发数据密集型的功能，否则是不实际的。比如说有这样一个功能，目的是实现每一个页面请求会再发出上百个数据库请求，这样的功能不可能离开原型期因为处理请求会很慢，成本也高。但在我们的应用里，网页往往会从服务器里fetch上千个键-值对。

我们的目的之一是展现在我们的不同阶段，不同规模的部署过程中的重要的经验知识。当然，像性能，效率，容错率还有一致性这些指标无论在哪个规模都是重要的，然而我们的经验告诉我们，在一些特定的规模下，一些指标比其他更难达到。比如说，小规模情况下，维持数据一致性会容易因为不需要很多的数据复制，但与大规模情况下相比，就会难很多，因为数据复制同步经常是必须的。而且，找到一个优化的沟通调度的重要性随着服务器数量的增加而增加，同时网络连接会成为瓶颈。

这篇论文主要有四个贡献：
（1）我们描述了Facebook memcached基建的进化 （2）我们标识了对memcached的改进，这些改进提高了整体的性能和内存效能 （3）我们凸显了能使我们的系统规模化的机制 （4）我们数据化了加载在我们production环境下的工作量。

**2.概览**

以下的性质大大地影响了我们的设计。首先，用户的读操作远远超过写操作。这一行为方式导致了Facebook以fetch data为主的工作量，也说明缓存在这种情况下有极大优势。第二，我们的读操作从许多不同的资源获取数据，比如MySQL数据库，HDFS，以及后端服务。这种不均匀性要求我们使用一种能够从完全不同的资源存储数据的灵活的缓存策略。

memcached有一套简单的操作（set, get,delete），从而很适合于在一个大规模的分布式系统做基本单元。我们一开始用的开源版本提供一个单机内存的hash table。在这篇论文里，我们讨论了我们是怎么通过这一基本的基建单元，慢慢地高效化，并用它建成一个能每秒处理数十亿请求的分布式键-值存储。自此，我们用memcached来描述源代码或者说运行的二进制程序，memcache来描述这一分布式系统。


